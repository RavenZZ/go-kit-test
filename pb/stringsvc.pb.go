// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stringsvc.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	stringsvc.proto

It has these top-level messages:
	UppercaseRequest
	UppercaseReply
	CountRequest
	CountReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UppercaseRequest struct {
	A string `protobuf:"bytes,1,opt,name=a" json:"a,omitempty"`
}

func (m *UppercaseRequest) Reset()                    { *m = UppercaseRequest{} }
func (m *UppercaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UppercaseRequest) ProtoMessage()               {}
func (*UppercaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UppercaseRequest) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

type UppercaseReply struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *UppercaseReply) Reset()                    { *m = UppercaseReply{} }
func (m *UppercaseReply) String() string            { return proto.CompactTextString(m) }
func (*UppercaseReply) ProtoMessage()               {}
func (*UppercaseReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UppercaseReply) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *UppercaseReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CountRequest struct {
	A string `protobuf:"bytes,1,opt,name=a" json:"a,omitempty"`
}

func (m *CountRequest) Reset()                    { *m = CountRequest{} }
func (m *CountRequest) String() string            { return proto.CompactTextString(m) }
func (*CountRequest) ProtoMessage()               {}
func (*CountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CountRequest) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

type CountReply struct {
	Count int64  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *CountReply) Reset()                    { *m = CountReply{} }
func (m *CountReply) String() string            { return proto.CompactTextString(m) }
func (*CountReply) ProtoMessage()               {}
func (*CountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CountReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*UppercaseRequest)(nil), "pb.UppercaseRequest")
	proto.RegisterType((*UppercaseReply)(nil), "pb.UppercaseReply")
	proto.RegisterType((*CountRequest)(nil), "pb.CountRequest")
	proto.RegisterType((*CountReply)(nil), "pb.CountReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StrService service

type StrServiceClient interface {
	Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseReply, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error)
}

type strServiceClient struct {
	cc *grpc.ClientConn
}

func NewStrServiceClient(cc *grpc.ClientConn) StrServiceClient {
	return &strServiceClient{cc}
}

func (c *strServiceClient) Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseReply, error) {
	out := new(UppercaseReply)
	err := grpc.Invoke(ctx, "/pb.StrService/Uppercase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := grpc.Invoke(ctx, "/pb.StrService/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StrService service

type StrServiceServer interface {
	Uppercase(context.Context, *UppercaseRequest) (*UppercaseReply, error)
	Count(context.Context, *CountRequest) (*CountReply, error)
}

func RegisterStrServiceServer(s *grpc.Server, srv StrServiceServer) {
	s.RegisterService(&_StrService_serviceDesc, srv)
}

func _StrService_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrServiceServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StrService/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrServiceServer).Uppercase(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StrService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StrService",
	HandlerType: (*StrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _StrService_Uppercase_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _StrService_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stringsvc.proto",
}

func init() { proto.RegisterFile("stringsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x8a, 0x83, 0x30,
	0x18, 0x84, 0x37, 0x8a, 0x0b, 0xfe, 0x88, 0x2b, 0xc1, 0x83, 0xc8, 0x1e, 0x24, 0xa7, 0x85, 0x05,
	0x0f, 0x6d, 0xa1, 0x0f, 0xe0, 0x1b, 0x28, 0x7d, 0x00, 0x0d, 0x3f, 0x45, 0x10, 0x4d, 0xff, 0x44,
	0xc1, 0xb7, 0x2f, 0x51, 0x29, 0x62, 0xe9, 0x2d, 0xf3, 0xcd, 0x30, 0x99, 0x04, 0x7e, 0xb4, 0xa1,
	0xb6, 0xbf, 0xeb, 0x49, 0xe6, 0x8a, 0x06, 0x33, 0x70, 0x47, 0x35, 0x22, 0x83, 0xe8, 0xa6, 0x14,
	0x92, 0xac, 0x35, 0x96, 0xf8, 0x18, 0x51, 0x1b, 0x1e, 0x00, 0xab, 0x13, 0x96, 0xb1, 0x3f, 0xbf,
	0x64, 0xb5, 0xb8, 0x40, 0xb8, 0x4b, 0xa8, 0x6e, 0xe6, 0x11, 0xb8, 0xda, 0xd0, 0x96, 0xb0, 0x47,
	0x4b, 0x90, 0x28, 0x71, 0x56, 0x82, 0x44, 0xe2, 0x17, 0x82, 0x62, 0x18, 0x7b, 0xf3, 0xa9, 0x13,
	0x36, 0xd7, 0xf6, 0xc5, 0xe0, 0x49, 0xab, 0x16, 0xdf, 0x2d, 0x57, 0xf1, 0xde, 0x79, 0x22, 0x80,
	0xca, 0x50, 0x85, 0x34, 0xb5, 0x12, 0xf9, 0x15, 0xfc, 0xd7, 0x2e, 0x1e, 0xe7, 0xaa, 0xc9, 0x8f,
	0x0f, 0x49, 0xf9, 0x81, 0xaa, 0x6e, 0x16, 0x5f, 0xfc, 0x1f, 0xbc, 0x62, 0xbd, 0xc1, 0xda, 0xfb,
	0x95, 0x69, 0xb8, 0x23, 0x4b, 0xb8, 0xf9, 0x5e, 0xbe, 0xea, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x9c, 0xb7, 0x5f, 0x3d, 0x01, 0x00, 0x00,
}
